"""
API –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∏–∑–±—Ä–∞–Ω–Ω—ã–º–∏ —Ç–æ—Ä–≥–æ–≤—ã–º–∏ –ø–∞—Ä–∞–º–∏
"""
from fastapi import APIRouter, HTTPException, Depends
from pydantic import BaseModel
from typing import List, Optional
import sqlite3
import logging
from datetime import datetime

logger = logging.getLogger(__name__)

router = APIRouter()

class FavoriteCreate(BaseModel):
    symbol: str
    notes: Optional[str] = None
    color: Optional[str] = "#FFD700"

class FavoriteUpdate(BaseModel):
    notes: Optional[str] = None
    color: Optional[str] = None

class FavoriteReorder(BaseModel):
    symbol_order: List[str]

def get_db_connection():
    """–ü–æ–ª—É—á–µ–Ω–∏–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö"""
    conn = sqlite3.connect('crypto_analyzer.db')
    conn.row_factory = sqlite3.Row
    return conn

def init_favorites_table():
    """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Ç–∞–±–ª–∏—Ü—ã –∏–∑–±—Ä–∞–Ω–Ω–æ–≥–æ"""
    conn = get_db_connection()
    try:
        conn.execute('''
            CREATE TABLE IF NOT EXISTS favorites (
                id INTEGER PRIMARY KEY AUTOINCREMENT,
                symbol TEXT UNIQUE NOT NULL,
                is_active BOOLEAN DEFAULT TRUE,
                price_drop_percentage REAL,
                current_price REAL,
                historical_price REAL,
                notes TEXT,
                color TEXT DEFAULT '#FFD700',
                sort_order INTEGER DEFAULT 0,
                favorite_added_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
                created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
                updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
            )
        ''')
        
        # –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω–¥–µ–∫—Å—ã –¥–ª—è –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏
        conn.execute('CREATE INDEX IF NOT EXISTS idx_favorites_symbol ON favorites(symbol)')
        conn.execute('CREATE INDEX IF NOT EXISTS idx_favorites_sort_order ON favorites(sort_order)')
        
        conn.commit()
        logger.info("‚úÖ –¢–∞–±–ª–∏—Ü–∞ favorites –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞")
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ —Ç–∞–±–ª–∏—Ü—ã favorites: {e}")
        conn.rollback()
    finally:
        conn.close()

@router.get("/")
async def get_favorites():
    """–ü–æ–ª—É—á–∏—Ç—å –≤—Å–µ –∏–∑–±—Ä–∞–Ω–Ω—ã–µ –ø–∞—Ä—ã"""
    conn = get_db_connection()
    try:
        cursor = conn.execute('''
            SELECT 
                id, symbol, is_active, price_drop_percentage, 
                current_price, historical_price, notes, color, 
                sort_order, favorite_added_at, created_at, updated_at
            FROM favorites 
            ORDER BY sort_order ASC, favorite_added_at DESC
        ''')
        
        favorites = []
        for row in cursor.fetchall():
            favorites.append({
                'id': row['id'],
                'symbol': row['symbol'],
                'is_active': bool(row['is_active']),
                'price_drop_percentage': row['price_drop_percentage'],
                'current_price': row['current_price'],
                'historical_price': row['historical_price'],
                'notes': row['notes'],
                'color': row['color'] or '#FFD700',
                'sort_order': row['sort_order'] or 0,
                'favorite_added_at': row['favorite_added_at'],
                'created_at': row['created_at'],
                'updated_at': row['updated_at']
            })
        
        logger.info(f"üìã –ü–æ–ª—É—á–µ–Ω–æ {len(favorites)} –∏–∑–±—Ä–∞–Ω–Ω—ã—Ö –ø–∞—Ä")
        return favorites
        
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∏–∑–±—Ä–∞–Ω–Ω–æ–≥–æ: {e}")
        raise HTTPException(status_code=500, detail=f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∏–∑–±—Ä–∞–Ω–Ω–æ–≥–æ: {str(e)}")
    finally:
        conn.close()

@router.post("/")
async def add_favorite(favorite: FavoriteCreate):
    """–î–æ–±–∞–≤–∏—Ç—å –ø–∞—Ä—É –≤ –∏–∑–±—Ä–∞–Ω–Ω–æ–µ"""
    conn = get_db_connection()
    try:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ —É–∂–µ —Ç–∞–∫–∞—è –ø–∞—Ä–∞
        cursor = conn.execute('SELECT id FROM favorites WHERE symbol = ?', (favorite.symbol,))
        if cursor.fetchone():
            raise HTTPException(status_code=400, detail=f"–ü–∞—Ä–∞ {favorite.symbol} —É–∂–µ –≤ –∏–∑–±—Ä–∞–Ω–Ω–æ–º")
        
        # –ü–æ–ª—É—á–∞–µ–º –º–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π sort_order
        cursor = conn.execute('SELECT MAX(sort_order) as max_order FROM favorites')
        max_order = cursor.fetchone()['max_order'] or 0
        
        # –î–æ–±–∞–≤–ª—è–µ–º –Ω–æ–≤—É—é –ø–∞—Ä—É
        cursor = conn.execute('''
            INSERT INTO favorites (symbol, notes, color, sort_order, favorite_added_at)
            VALUES (?, ?, ?, ?, ?)
        ''', (
            favorite.symbol.upper(),
            favorite.notes,
            favorite.color or '#FFD700',
            max_order + 1,
            datetime.utcnow().isoformat()
        ))
        
        conn.commit()
        favorite_id = cursor.lastrowid
        
        logger.info(f"‚úÖ –î–æ–±–∞–≤–ª–µ–Ω–∞ –ø–∞—Ä–∞ –≤ –∏–∑–±—Ä–∞–Ω–Ω–æ–µ: {favorite.symbol}")
        
        return {
            'id': favorite_id,
            'symbol': favorite.symbol.upper(),
            'message': f'–ü–∞—Ä–∞ {favorite.symbol} –¥–æ–±–∞–≤–ª–µ–Ω–∞ –≤ –∏–∑–±—Ä–∞–Ω–Ω–æ–µ'
        }
        
    except HTTPException:
        raise
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –≤ –∏–∑–±—Ä–∞–Ω–Ω–æ–µ: {e}")
        conn.rollback()
        raise HTTPException(status_code=500, detail=f"–û—à–∏–±–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –≤ –∏–∑–±—Ä–∞–Ω–Ω–æ–µ: {str(e)}")
    finally:
        conn.close()

@router.put("/{symbol}")
async def update_favorite(symbol: str, favorite: FavoriteUpdate):
    """–û–±–Ω–æ–≤–∏—Ç—å –∏–∑–±—Ä–∞–Ω–Ω—É—é –ø–∞—Ä—É"""
    conn = get_db_connection()
    try:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ –ø–∞—Ä—ã
        cursor = conn.execute('SELECT id FROM favorites WHERE symbol = ?', (symbol.upper(),))
        if not cursor.fetchone():
            raise HTTPException(status_code=404, detail=f"–ü–∞—Ä–∞ {symbol} –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –≤ –∏–∑–±—Ä–∞–Ω–Ω–æ–º")
        
        # –û–±–Ω–æ–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ
        update_fields = []
        params = []
        
        if favorite.notes is not None:
            update_fields.append('notes = ?')
            params.append(favorite.notes)
        
        if favorite.color is not None:
            update_fields.append('color = ?')
            params.append(favorite.color)
        
        if update_fields:
            update_fields.append('updated_at = ?')
            params.append(datetime.utcnow().isoformat())
            params.append(symbol.upper())
            
            query = f"UPDATE favorites SET {', '.join(update_fields)} WHERE symbol = ?"
            conn.execute(query, params)
            conn.commit()
        
        logger.info(f"‚úÖ –û–±–Ω–æ–≤–ª–µ–Ω–∞ –∏–∑–±—Ä–∞–Ω–Ω–∞—è –ø–∞—Ä–∞: {symbol}")
        return {'message': f'–ü–∞—Ä–∞ {symbol} –æ–±–Ω–æ–≤–ª–µ–Ω–∞'}
        
    except HTTPException:
        raise
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∏–∑–±—Ä–∞–Ω–Ω–æ–≥–æ: {e}")
        conn.rollback()
        raise HTTPException(status_code=500, detail=f"–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∏–∑–±—Ä–∞–Ω–Ω–æ–≥–æ: {str(e)}")
    finally:
        conn.close()

@router.delete("/{symbol}")
async def remove_favorite(symbol: str):
    """–£–¥–∞–ª–∏—Ç—å –ø–∞—Ä—É –∏–∑ –∏–∑–±—Ä–∞–Ω–Ω–æ–≥–æ"""
    conn = get_db_connection()
    try:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ –ø–∞—Ä—ã
        cursor = conn.execute('SELECT id FROM favorites WHERE symbol = ?', (symbol.upper(),))
        if not cursor.fetchone():
            raise HTTPException(status_code=404, detail=f"–ü–∞—Ä–∞ {symbol} –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –≤ –∏–∑–±—Ä–∞–Ω–Ω–æ–º")
        
        # –£–¥–∞–ª—è–µ–º –ø–∞—Ä—É
        conn.execute('DELETE FROM favorites WHERE symbol = ?', (symbol.upper(),))
        conn.commit()
        
        logger.info(f"‚úÖ –£–¥–∞–ª–µ–Ω–∞ –ø–∞—Ä–∞ –∏–∑ –∏–∑–±—Ä–∞–Ω–Ω–æ–≥–æ: {symbol}")
        return {'message': f'–ü–∞—Ä–∞ {symbol} —É–¥–∞–ª–µ–Ω–∞ –∏–∑ –∏–∑–±—Ä–∞–Ω–Ω–æ–≥–æ'}
        
    except HTTPException:
        raise
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è –∏–∑ –∏–∑–±—Ä–∞–Ω–Ω–æ–≥–æ: {e}")
        conn.rollback()
        raise HTTPException(status_code=500, detail=f"–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è –∏–∑ –∏–∑–±—Ä–∞–Ω–Ω–æ–≥–æ: {str(e)}")
    finally:
        conn.close()

@router.post("/reorder")
async def reorder_favorites(reorder: FavoriteReorder):
    """–ò–∑–º–µ–Ω–∏—Ç—å –ø–æ—Ä—è–¥–æ–∫ –∏–∑–±—Ä–∞–Ω–Ω—ã—Ö –ø–∞—Ä"""
    conn = get_db_connection()
    try:
        # –û–±–Ω–æ–≤–ª—è–µ–º –ø–æ—Ä—è–¥–æ–∫ –¥–ª—è –∫–∞–∂–¥–æ–π –ø–∞—Ä—ã
        for index, symbol in enumerate(reorder.symbol_order):
            conn.execute(
                'UPDATE favorites SET sort_order = ?, updated_at = ? WHERE symbol = ?',
                (index, datetime.utcnow().isoformat(), symbol.upper())
            )
        
        conn.commit()
        logger.info(f"‚úÖ –û–±–Ω–æ–≤–ª–µ–Ω –ø–æ—Ä—è–¥–æ–∫ {len(reorder.symbol_order)} –∏–∑–±—Ä–∞–Ω–Ω—ã—Ö –ø–∞—Ä")
        return {'message': '–ü–æ—Ä—è–¥–æ–∫ –∏–∑–±—Ä–∞–Ω–Ω–æ–≥–æ –æ–±–Ω–æ–≤–ª–µ–Ω'}
        
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∏–∑–º–µ–Ω–µ–Ω–∏—è –ø–æ—Ä—è–¥–∫–∞ –∏–∑–±—Ä–∞–Ω–Ω–æ–≥–æ: {e}")
        conn.rollback()
        raise HTTPException(status_code=500, detail=f"–û—à–∏–±–∫–∞ –∏–∑–º–µ–Ω–µ–Ω–∏—è –ø–æ—Ä—è–¥–∫–∞: {str(e)}")
    finally:
        conn.close()

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º —Ç–∞–±–ª–∏—Ü—É –ø—Ä–∏ –∏–º–ø–æ—Ä—Ç–µ –º–æ–¥—É–ª—è
init_favorites_table()