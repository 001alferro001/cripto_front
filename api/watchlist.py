"""
API –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Å–ø–∏—Å–∫–æ–º –Ω–∞–±–ª—é–¥–µ–Ω–∏—è (watchlist)
"""
from fastapi import APIRouter, HTTPException
from pydantic import BaseModel
from typing import List, Optional
import sqlite3
import logging
from datetime import datetime

logger = logging.getLogger(__name__)

router = APIRouter()

class WatchlistCreate(BaseModel):
    symbol: str

class WatchlistUpdate(BaseModel):
    id: int
    symbol: str
    is_active: bool

def get_db_connection():
    """–ü–æ–ª—É—á–µ–Ω–∏–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö"""
    conn = sqlite3.connect('crypto_analyzer.db')
    conn.row_factory = sqlite3.Row
    return conn

def init_watchlist_table():
    """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Ç–∞–±–ª–∏—Ü—ã watchlist"""
    conn = get_db_connection()
    try:
        conn.execute('''
            CREATE TABLE IF NOT EXISTS watchlist (
                id INTEGER PRIMARY KEY AUTOINCREMENT,
                symbol TEXT UNIQUE NOT NULL,
                is_active BOOLEAN DEFAULT TRUE,
                price_drop_percentage REAL,
                current_price REAL,
                historical_price REAL,
                created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
                updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
            )
        ''')
        
        # –î–æ–±–∞–≤–ª—è–µ–º –∫–æ–ª–æ–Ω–∫—É is_favorite –µ—Å–ª–∏ –µ—ë –Ω–µ—Ç
        try:
            conn.execute('ALTER TABLE watchlist ADD COLUMN is_favorite BOOLEAN DEFAULT FALSE')
        except sqlite3.OperationalError:
            # –ö–æ–ª–æ–Ω–∫–∞ —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
            pass
        
        # –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω–¥–µ–∫—Å—ã –¥–ª—è –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏
        conn.execute('CREATE INDEX IF NOT EXISTS idx_watchlist_symbol ON watchlist(symbol)')
        conn.execute('CREATE INDEX IF NOT EXISTS idx_watchlist_active ON watchlist(is_active)')
        
        conn.commit()
        logger.info("‚úÖ –¢–∞–±–ª–∏—Ü–∞ watchlist –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞")
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ —Ç–∞–±–ª–∏—Ü—ã watchlist: {e}")
        conn.rollback()
    finally:
        conn.close()

def update_watchlist_favorites():
    """–û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å is_favorite –≤ watchlist –Ω–∞ –æ—Å–Ω–æ–≤–µ —Ç–∞–±–ª–∏—Ü—ã favorites"""
    conn = get_db_connection()
    try:
        # –°–Ω–∞—á–∞–ª–∞ —Å–±—Ä–∞—Å—ã–≤–∞–µ–º –≤—Å–µ —Ñ–ª–∞–≥–∏
        conn.execute('UPDATE watchlist SET is_favorite = FALSE')
        
        # –ó–∞—Ç–µ–º —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ñ–ª–∞–≥–∏ –¥–ª—è –ø–∞—Ä, –∫–æ—Ç–æ—Ä—ã–µ –µ—Å—Ç—å –≤ favorites
        conn.execute('''
            UPDATE watchlist 
            SET is_favorite = TRUE 
            WHERE symbol IN (SELECT symbol FROM favorites)
        ''')
        
        conn.commit()
        logger.debug("‚úÖ –û–±–Ω–æ–≤–ª–µ–Ω—ã —Ñ–ª–∞–≥–∏ –∏–∑–±—Ä–∞–Ω–Ω–æ–≥–æ –≤ watchlist")
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Ñ–ª–∞–≥–æ–≤ –∏–∑–±—Ä–∞–Ω–Ω–æ–≥–æ: {e}")
        conn.rollback()
    finally:
        conn.close()

@router.get("/")
async def get_watchlist():
    """–ü–æ–ª—É—á–∏—Ç—å –≤–µ—Å—å —Å–ø–∏—Å–æ–∫ –Ω–∞–±–ª—é–¥–µ–Ω–∏—è"""
    conn = get_db_connection()
    try:
        # –û–±–Ω–æ–≤–ª—è–µ–º —Ñ–ª–∞–≥–∏ –∏–∑–±—Ä–∞–Ω–Ω–æ–≥–æ –ø–µ—Ä–µ–¥ –≤–æ–∑–≤—Ä–∞—Ç–æ–º –¥–∞–Ω–Ω—ã—Ö
        update_watchlist_favorites()
        
        cursor = conn.execute('''
            SELECT 
                id, symbol, is_active, is_favorite, price_drop_percentage, 
                current_price, historical_price, created_at, updated_at
            FROM watchlist 
            ORDER BY is_favorite DESC, symbol ASC
        ''')
        
        watchlist = []
        for row in cursor.fetchall():
            watchlist.append({
                'id': row['id'],
                'symbol': row['symbol'],
                'is_active': bool(row['is_active']),
                'is_favorite': bool(row['is_favorite']),
                'price_drop_percentage': row['price_drop_percentage'],
                'current_price': row['current_price'],
                'historical_price': row['historical_price'],
                'created_at': row['created_at'],
                'updated_at': row['updated_at']
            })
        
        logger.info(f"üìã –ü–æ–ª—É—á–µ–Ω watchlist: {len(watchlist)} –ø–∞—Ä")
        return watchlist
        
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è watchlist: {e}")
        raise HTTPException(status_code=500, detail=f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å–ø–∏—Å–∫–∞: {str(e)}")
    finally:
        conn.close()

@router.post("/")
async def add_to_watchlist(item: WatchlistCreate):
    """–î–æ–±–∞–≤–∏—Ç—å –ø–∞—Ä—É –≤ —Å–ø–∏—Å–æ–∫ –Ω–∞–±–ª—é–¥–µ–Ω–∏—è"""
    conn = get_db_connection()
    try:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ —É–∂–µ —Ç–∞–∫–∞—è –ø–∞—Ä–∞
        cursor = conn.execute('SELECT id FROM watchlist WHERE symbol = ?', (item.symbol.upper(),))
        if cursor.fetchone():
            raise HTTPException(status_code=400, detail=f"–ü–∞—Ä–∞ {item.symbol} —É–∂–µ –≤ —Å–ø–∏—Å–∫–µ –Ω–∞–±–ª—é–¥–µ–Ω–∏—è")
        
        # –î–æ–±–∞–≤–ª—è–µ–º –Ω–æ–≤—É—é –ø–∞—Ä—É
        cursor = conn.execute('''
            INSERT INTO watchlist (symbol, created_at, updated_at)
            VALUES (?, ?, ?)
        ''', (
            item.symbol.upper(),
            datetime.utcnow().isoformat(),
            datetime.utcnow().isoformat()
        ))
        
        conn.commit()
        watchlist_id = cursor.lastrowid
        
        logger.info(f"‚úÖ –î–æ–±–∞–≤–ª–µ–Ω–∞ –ø–∞—Ä–∞ –≤ watchlist: {item.symbol}")
        
        return {
            'id': watchlist_id,
            'symbol': item.symbol.upper(),
            'message': f'–ü–∞—Ä–∞ {item.symbol} –¥–æ–±–∞–≤–ª–µ–Ω–∞ –≤ —Å–ø–∏—Å–æ–∫ –Ω–∞–±–ª—é–¥–µ–Ω–∏—è'
        }
        
    except HTTPException:
        raise
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –≤ watchlist: {e}")
        conn.rollback()
        raise HTTPException(status_code=500, detail=f"–û—à–∏–±–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –≤ —Å–ø–∏—Å–æ–∫: {str(e)}")
    finally:
        conn.close()

@router.put("/{item_id}")
async def update_watchlist_item(item_id: int, item: WatchlistUpdate):
    """–û–±–Ω–æ–≤–∏—Ç—å —ç–ª–µ–º–µ–Ω—Ç —Å–ø–∏—Å–∫–∞ –Ω–∞–±–ª—é–¥–µ–Ω–∏—è"""
    conn = get_db_connection()
    try:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ —ç–ª–µ–º–µ–Ω—Ç–∞
        cursor = conn.execute('SELECT id FROM watchlist WHERE id = ?', (item_id,))
        if not cursor.fetchone():
            raise HTTPException(status_code=404, detail=f"–≠–ª–µ–º–µ–Ω—Ç —Å ID {item_id} –Ω–µ –Ω–∞–π–¥–µ–Ω")
        
        # –û–±–Ω–æ–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ
        conn.execute('''
            UPDATE watchlist 
            SET symbol = ?, is_active = ?, updated_at = ?
            WHERE id = ?
        ''', (
            item.symbol.upper(),
            item.is_active,
            datetime.utcnow().isoformat(),
            item_id
        ))
        
        conn.commit()
        
        logger.info(f"‚úÖ –û–±–Ω–æ–≤–ª–µ–Ω —ç–ª–µ–º–µ–Ω—Ç watchlist ID={item_id}: {item.symbol}")
        return {'message': f'–≠–ª–µ–º–µ–Ω—Ç {item.symbol} –æ–±–Ω–æ–≤–ª–µ–Ω'}
        
    except HTTPException:
        raise
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è watchlist: {e}")
        conn.rollback()
        raise HTTPException(status_code=500, detail=f"–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —ç–ª–µ–º–µ–Ω—Ç–∞: {str(e)}")
    finally:
        conn.close()

@router.delete("/{item_id}")
async def remove_from_watchlist(item_id: int):
    """–£–¥–∞–ª–∏—Ç—å –ø–∞—Ä—É –∏–∑ —Å–ø–∏—Å–∫–∞ –Ω–∞–±–ª—é–¥–µ–Ω–∏—è"""
    conn = get_db_connection()
    try:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ —ç–ª–µ–º–µ–Ω—Ç–∞
        cursor = conn.execute('SELECT symbol FROM watchlist WHERE id = ?', (item_id,))
        row = cursor.fetchone()
        if not row:
            raise HTTPException(status_code=404, detail=f"–≠–ª–µ–º–µ–Ω—Ç —Å ID {item_id} –Ω–µ –Ω–∞–π–¥–µ–Ω")
        
        symbol = row['symbol']
        
        # –£–¥–∞–ª—è–µ–º —ç–ª–µ–º–µ–Ω—Ç
        conn.execute('DELETE FROM watchlist WHERE id = ?', (item_id,))
        conn.commit()
        
        logger.info(f"‚úÖ –£–¥–∞–ª–µ–Ω —ç–ª–µ–º–µ–Ω—Ç –∏–∑ watchlist: {symbol}")
        return {'message': f'–ü–∞—Ä–∞ {symbol} —É–¥–∞–ª–µ–Ω–∞ –∏–∑ —Å–ø–∏—Å–∫–∞ –Ω–∞–±–ª—é–¥–µ–Ω–∏—è'}
        
    except HTTPException:
        raise
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è –∏–∑ watchlist: {e}")
        conn.rollback()
        raise HTTPException(status_code=500, detail=f"–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è —ç–ª–µ–º–µ–Ω—Ç–∞: {str(e)}")
    finally:
        conn.close()

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º —Ç–∞–±–ª–∏—Ü—É –ø—Ä–∏ –∏–º–ø–æ—Ä—Ç–µ –º–æ–¥—É–ª—è
init_watchlist_table()