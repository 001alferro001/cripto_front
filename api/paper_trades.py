"""
API –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –±—É–º–∞–∂–Ω—ã–º–∏ —Å–¥–µ–ª–∫–∞–º–∏
"""
from fastapi import APIRouter, HTTPException
from pydantic import BaseModel
from typing import List, Optional
import sqlite3
import logging
from datetime import datetime

logger = logging.getLogger(__name__)

router = APIRouter()

class PaperTradeCreate(BaseModel):
    symbol: str
    alert_id: Optional[int] = None
    direction: str  # 'LONG' –∏–ª–∏ 'SHORT'
    entry_price: float
    stop_loss: float
    take_profit: float
    quantity: float
    risk_amount: float
    risk_percentage: float
    position_value: float
    potential_loss: float
    potential_profit: float
    risk_reward_ratio: float
    status: str = 'planned'  # 'planned', 'active', 'closed'
    notes: Optional[str] = None

class PaperTradeUpdate(BaseModel):
    status: Optional[str] = None
    exit_price: Optional[float] = None
    exit_time: Optional[str] = None
    actual_profit_loss: Optional[float] = None
    notes: Optional[str] = None

def get_db_connection():
    """–ü–æ–ª—É—á–µ–Ω–∏–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö"""
    conn = sqlite3.connect('crypto_analyzer.db')
    conn.row_factory = sqlite3.Row
    return conn

def init_paper_trades_table():
    """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Ç–∞–±–ª–∏—Ü—ã –±—É–º–∞–∂–Ω—ã—Ö —Å–¥–µ–ª–æ–∫"""
    conn = get_db_connection()
    try:
        conn.execute('''
            CREATE TABLE IF NOT EXISTS paper_trades (
                id INTEGER PRIMARY KEY AUTOINCREMENT,
                symbol TEXT NOT NULL,
                alert_id INTEGER,
                direction TEXT NOT NULL CHECK (direction IN ('LONG', 'SHORT')),
                entry_price REAL NOT NULL,
                stop_loss REAL NOT NULL,
                take_profit REAL NOT NULL,
                quantity REAL NOT NULL,
                risk_amount REAL NOT NULL,
                risk_percentage REAL NOT NULL,
                position_value REAL NOT NULL,
                potential_loss REAL NOT NULL,
                potential_profit REAL NOT NULL,
                risk_reward_ratio REAL NOT NULL,
                status TEXT DEFAULT 'planned' CHECK (status IN ('planned', 'active', 'closed')),
                exit_price REAL,
                exit_time TIMESTAMP,
                actual_profit_loss REAL,
                notes TEXT,
                created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
                updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
            )
        ''')
        
        # –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω–¥–µ–∫—Å—ã –¥–ª—è –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏
        conn.execute('CREATE INDEX IF NOT EXISTS idx_paper_trades_symbol ON paper_trades(symbol)')
        conn.execute('CREATE INDEX IF NOT EXISTS idx_paper_trades_status ON paper_trades(status)')
        conn.execute('CREATE INDEX IF NOT EXISTS idx_paper_trades_created_at ON paper_trades(created_at)')
        
        conn.commit()
        logger.info("‚úÖ –¢–∞–±–ª–∏—Ü–∞ paper_trades –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞")
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ —Ç–∞–±–ª–∏—Ü—ã paper_trades: {e}")
        conn.rollback()
    finally:
        conn.close()

@router.get("/")
async def get_paper_trades(status: Optional[str] = None, symbol: Optional[str] = None):
    """–ü–æ–ª—É—á–∏—Ç—å –≤—Å–µ –±—É–º–∞–∂–Ω—ã–µ —Å–¥–µ–ª–∫–∏"""
    conn = get_db_connection()
    try:
        query = '''
            SELECT 
                id, symbol, alert_id, direction, entry_price, stop_loss, take_profit,
                quantity, risk_amount, risk_percentage, position_value,
                potential_loss, potential_profit, risk_reward_ratio,
                status, exit_price, exit_time, actual_profit_loss, notes,
                created_at, updated_at
            FROM paper_trades 
            WHERE 1=1
        '''
        params = []
        
        if status:
            query += ' AND status = ?'
            params.append(status)
        
        if symbol:
            query += ' AND symbol = ?'
            params.append(symbol.upper())
        
        query += ' ORDER BY created_at DESC'
        
        cursor = conn.execute(query, params)
        
        trades = []
        for row in cursor.fetchall():
            trades.append({
                'id': row['id'],
                'symbol': row['symbol'],
                'alert_id': row['alert_id'],
                'direction': row['direction'],
                'entry_price': row['entry_price'],
                'stop_loss': row['stop_loss'],
                'take_profit': row['take_profit'],
                'quantity': row['quantity'],
                'risk_amount': row['risk_amount'],
                'risk_percentage': row['risk_percentage'],
                'position_value': row['position_value'],
                'potential_loss': row['potential_loss'],
                'potential_profit': row['potential_profit'],
                'risk_reward_ratio': row['risk_reward_ratio'],
                'status': row['status'],
                'exit_price': row['exit_price'],
                'exit_time': row['exit_time'],
                'actual_profit_loss': row['actual_profit_loss'],
                'notes': row['notes'],
                'created_at': row['created_at'],
                'updated_at': row['updated_at']
            })
        
        logger.info(f"üìã –ü–æ–ª—É—á–µ–Ω–æ {len(trades)} –±—É–º–∞–∂–Ω—ã—Ö —Å–¥–µ–ª–æ–∫")
        return trades
        
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –±—É–º–∞–∂–Ω—ã—Ö —Å–¥–µ–ª–æ–∫: {e}")
        raise HTTPException(status_code=500, detail=f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å–¥–µ–ª–æ–∫: {str(e)}")
    finally:
        conn.close()

@router.post("/")
async def create_paper_trade(trade: PaperTradeCreate):
    """–°–æ–∑–¥–∞—Ç—å –Ω–æ–≤—É—é –±—É–º–∞–∂–Ω—É—é —Å–¥–µ–ª–∫—É"""
    conn = get_db_connection()
    try:
        # –í–∞–ª–∏–¥–∞—Ü–∏—è –¥–∞–Ω–Ω—ã—Ö
        if trade.direction not in ['LONG', 'SHORT']:
            raise HTTPException(status_code=400, detail="–ù–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å LONG –∏–ª–∏ SHORT")
        
        if trade.entry_price <= 0:
            raise HTTPException(status_code=400, detail="–¶–µ–Ω–∞ –≤—Ö–æ–¥–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –±–æ–ª—å—à–µ 0")
        
        if trade.quantity <= 0:
            raise HTTPException(status_code=400, detail="–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –±–æ–ª—å—à–µ 0")
        
        # –í–∞–ª–∏–¥–∞—Ü–∏—è –ª–æ–≥–∏–∫–∏ —Å—Ç–æ–ø-–ª–æ—Å—Å–∞ –∏ —Ç–µ–π–∫-–ø—Ä–æ—Ñ–∏—Ç–∞
        if trade.direction == 'LONG':
            if trade.stop_loss >= trade.entry_price:
                raise HTTPException(status_code=400, detail="–î–ª—è LONG —Å—Ç–æ–ø-–ª–æ—Å—Å –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –º–µ–Ω—å—à–µ —Ü–µ–Ω—ã –≤—Ö–æ–¥–∞")
            if trade.take_profit <= trade.entry_price:
                raise HTTPException(status_code=400, detail="–î–ª—è LONG —Ç–µ–π–∫-–ø—Ä–æ—Ñ–∏—Ç –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –±–æ–ª—å—à–µ —Ü–µ–Ω—ã –≤—Ö–æ–¥–∞")
        else:  # SHORT
            if trade.stop_loss <= trade.entry_price:
                raise HTTPException(status_code=400, detail="–î–ª—è SHORT —Å—Ç–æ–ø-–ª–æ—Å—Å –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –±–æ–ª—å—à–µ —Ü–µ–Ω—ã –≤—Ö–æ–¥–∞")
            if trade.take_profit >= trade.entry_price:
                raise HTTPException(status_code=400, detail="–î–ª—è SHORT —Ç–µ–π–∫-–ø—Ä–æ—Ñ–∏—Ç –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –º–µ–Ω—å—à–µ —Ü–µ–Ω—ã –≤—Ö–æ–¥–∞")
        
        # –°–æ–∑–¥–∞–µ–º —Å–¥–µ–ª–∫—É
        cursor = conn.execute('''
            INSERT INTO paper_trades (
                symbol, alert_id, direction, entry_price, stop_loss, take_profit,
                quantity, risk_amount, risk_percentage, position_value,
                potential_loss, potential_profit, risk_reward_ratio,
                status, notes, created_at, updated_at
            ) VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)
        ''', (
            trade.symbol.upper(),
            trade.alert_id,
            trade.direction,
            trade.entry_price,
            trade.stop_loss,
            trade.take_profit,
            trade.quantity,
            trade.risk_amount,
            trade.risk_percentage,
            trade.position_value,
            trade.potential_loss,
            trade.potential_profit,
            trade.risk_reward_ratio,
            trade.status,
            trade.notes,
            datetime.utcnow().isoformat(),
            datetime.utcnow().isoformat()
        ))
        
        conn.commit()
        trade_id = cursor.lastrowid
        
        logger.info(f"‚úÖ –°–æ–∑–¥–∞–Ω–∞ –±—É–º–∞–∂–Ω–∞—è —Å–¥–µ–ª–∫–∞: {trade.symbol} {trade.direction} ID={trade_id}")
        
        return {
            'id': trade_id,
            'symbol': trade.symbol.upper(),
            'direction': trade.direction,
            'message': f'{trade.direction} –±—É–º–∞–∂–Ω–∞—è —Å–¥–µ–ª–∫–∞ –¥–ª—è {trade.symbol} —Å–æ–∑–¥–∞–Ω–∞'
        }
        
    except HTTPException:
        raise
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –±—É–º–∞–∂–Ω–æ–π —Å–¥–µ–ª–∫–∏: {e}")
        conn.rollback()
        raise HTTPException(status_code=500, detail=f"–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —Å–¥–µ–ª–∫–∏: {str(e)}")
    finally:
        conn.close()

@router.put("/{trade_id}")
async def update_paper_trade(trade_id: int, trade_update: PaperTradeUpdate):
    """–û–±–Ω–æ–≤–∏—Ç—å –±—É–º–∞–∂–Ω—É—é —Å–¥–µ–ª–∫—É"""
    conn = get_db_connection()
    try:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ —Å–¥–µ–ª–∫–∏
        cursor = conn.execute('SELECT id FROM paper_trades WHERE id = ?', (trade_id,))
        if not cursor.fetchone():
            raise HTTPException(status_code=404, detail=f"–°–¥–µ–ª–∫–∞ —Å ID {trade_id} –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")
        
        # –û–±–Ω–æ–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ
        update_fields = []
        params = []
        
        if trade_update.status is not None:
            if trade_update.status not in ['planned', 'active', 'closed']:
                raise HTTPException(status_code=400, detail="–ù–µ–≤–µ—Ä–Ω—ã–π —Å—Ç–∞—Ç—É—Å —Å–¥–µ–ª–∫–∏")
            update_fields.append('status = ?')
            params.append(trade_update.status)
        
        if trade_update.exit_price is not None:
            update_fields.append('exit_price = ?')
            params.append(trade_update.exit_price)
        
        if trade_update.exit_time is not None:
            update_fields.append('exit_time = ?')
            params.append(trade_update.exit_time)
        
        if trade_update.actual_profit_loss is not None:
            update_fields.append('actual_profit_loss = ?')
            params.append(trade_update.actual_profit_loss)
        
        if trade_update.notes is not None:
            update_fields.append('notes = ?')
            params.append(trade_update.notes)
        
        if update_fields:
            update_fields.append('updated_at = ?')
            params.append(datetime.utcnow().isoformat())
            params.append(trade_id)
            
            query = f"UPDATE paper_trades SET {', '.join(update_fields)} WHERE id = ?"
            conn.execute(query, params)
            conn.commit()
        
        logger.info(f"‚úÖ –û–±–Ω–æ–≤–ª–µ–Ω–∞ –±—É–º–∞–∂–Ω–∞—è —Å–¥–µ–ª–∫–∞ ID={trade_id}")
        return {'message': f'–°–¥–µ–ª–∫–∞ {trade_id} –æ–±–Ω–æ–≤–ª–µ–Ω–∞'}
        
    except HTTPException:
        raise
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –±—É–º–∞–∂–Ω–æ–π —Å–¥–µ–ª–∫–∏: {e}")
        conn.rollback()
        raise HTTPException(status_code=500, detail=f"–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å–¥–µ–ª–∫–∏: {str(e)}")
    finally:
        conn.close()

@router.delete("/{trade_id}")
async def delete_paper_trade(trade_id: int):
    """–£–¥–∞–ª–∏—Ç—å –±—É–º–∞–∂–Ω—É—é —Å–¥–µ–ª–∫—É"""
    conn = get_db_connection()
    try:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ —Å–¥–µ–ª–∫–∏
        cursor = conn.execute('SELECT id FROM paper_trades WHERE id = ?', (trade_id,))
        if not cursor.fetchone():
            raise HTTPException(status_code=404, detail=f"–°–¥–µ–ª–∫–∞ —Å ID {trade_id} –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")
        
        # –£–¥–∞–ª—è–µ–º —Å–¥–µ–ª–∫—É
        conn.execute('DELETE FROM paper_trades WHERE id = ?', (trade_id,))
        conn.commit()
        
        logger.info(f"‚úÖ –£–¥–∞–ª–µ–Ω–∞ –±—É–º–∞–∂–Ω–∞—è —Å–¥–µ–ª–∫–∞ ID={trade_id}")
        return {'message': f'–°–¥–µ–ª–∫–∞ {trade_id} —É–¥–∞–ª–µ–Ω–∞'}
        
    except HTTPException:
        raise
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è –±—É–º–∞–∂–Ω–æ–π —Å–¥–µ–ª–∫–∏: {e}")
        conn.rollback()
        raise HTTPException(status_code=500, detail=f"–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è —Å–¥–µ–ª–∫–∏: {str(e)}")
    finally:
        conn.close()

@router.get("/stats")
async def get_paper_trading_stats():
    """–ü–æ–ª—É—á–∏—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –±—É–º–∞–∂–Ω–æ–π —Ç–æ—Ä–≥–æ–≤–ª–∏"""
    conn = get_db_connection()
    try:
        # –û–±—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
        cursor = conn.execute('''
            SELECT 
                COUNT(*) as total_trades,
                COUNT(CASE WHEN status = 'planned' THEN 1 END) as planned_trades,
                COUNT(CASE WHEN status = 'active' THEN 1 END) as active_trades,
                COUNT(CASE WHEN status = 'closed' THEN 1 END) as closed_trades,
                SUM(CASE WHEN status = 'closed' AND actual_profit_loss > 0 THEN 1 ELSE 0 END) as winning_trades,
                SUM(CASE WHEN status = 'closed' AND actual_profit_loss < 0 THEN 1 ELSE 0 END) as losing_trades,
                SUM(CASE WHEN status = 'closed' THEN actual_profit_loss ELSE 0 END) as total_pnl,
                AVG(CASE WHEN status = 'closed' THEN actual_profit_loss ELSE NULL END) as avg_pnl,
                SUM(risk_amount) as total_risk_amount
            FROM paper_trades
        ''')
        
        stats = dict(cursor.fetchone())
        
        # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ —Å–∏–º–≤–æ–ª–∞–º
        cursor = conn.execute('''
            SELECT 
                symbol,
                COUNT(*) as trades_count,
                SUM(CASE WHEN status = 'closed' THEN actual_profit_loss ELSE 0 END) as symbol_pnl
            FROM paper_trades
            GROUP BY symbol
            ORDER BY trades_count DESC
            LIMIT 10
        ''')
        
        symbol_stats = [dict(row) for row in cursor.fetchall()]
        
        # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏—è–º
        cursor = conn.execute('''
            SELECT 
                direction,
                COUNT(*) as trades_count,
                SUM(CASE WHEN status = 'closed' THEN actual_profit_loss ELSE 0 END) as direction_pnl,
                AVG(CASE WHEN status = 'closed' THEN actual_profit_loss ELSE NULL END) as avg_pnl
            FROM paper_trades
            GROUP BY direction
        ''')
        
        direction_stats = [dict(row) for row in cursor.fetchall()]
        
        return {
            'general': stats,
            'by_symbol': symbol_stats,
            'by_direction': direction_stats
        }
        
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏: {e}")
        raise HTTPException(status_code=500, detail=f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏: {str(e)}")
    finally:
        conn.close()

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º —Ç–∞–±–ª–∏—Ü—É –ø—Ä–∏ –∏–º–ø–æ—Ä—Ç–µ –º–æ–¥—É–ª—è
init_paper_trades_table()